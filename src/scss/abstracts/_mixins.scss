/* ============================================
   SCSS Mixins - Reusable Style Patterns
   ============================================ */

@use 'variables' as *;

/* ============================================
   Layout Mixins
   ============================================ */

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-start {
  display: flex;
  justify-content: flex-start;
  align-items: center;
}

@mixin flex-end {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin position-sticky($top: map-get($spacers, 2), $z-index: map-get($z-indexes, sticky)) {
  position: sticky;
  top: $top;
  z-index: $z-index;
  align-self: flex-start;
}

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* ============================================
   Form Control Mixins
   ============================================ */

@mixin form-control-base {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  font-family: $font-family-base;
  font-size: $input-font-size;
  font-weight: map-get($font-weights, normal);
  line-height: map-get($line-heights, normal);
  color: $text-primary;
  background-color: $input-bg;
  background-image: none;
  border: $input-border-width solid $input-border-color;
  border-radius: $input-border-radius;
  transition: $transition-base;

  &::placeholder {
    color: $text-muted;
    opacity: 1;
  }

  &:focus {
    color: $text-primary;
    background-color: $input-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    box-shadow: $input-focus-box-shadow;
  }

  &:disabled,
  &[readonly] {
    background-color: $input-disabled-bg;
    border-color: $border-color-light;
    color: $text-muted;
    cursor: not-allowed;
    opacity: 1;

    &::placeholder {
      color: $text-muted;
    }
  }
}

@mixin form-control-validation($color) {
  border-color: $color;

  &:focus {
    border-color: $color;
    box-shadow: 0 0 0 0.25rem rgba($color, 0.25);
  }
}

@mixin form-select {
  @include form-control-base;
  
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  background-position: right $input-padding-x center;
  background-repeat: no-repeat;
  background-size: 16px 12px;
  padding-right: calc(#{$input-padding-x} + 2rem);
  appearance: none;

  &:disabled {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23adb5bd' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  }
}

@mixin form-textarea {
  @include form-control-base;
  
  resize: vertical;
  min-height: calc(#{$input-font-size} * #{map-get($line-heights, normal)} + #{$input-padding-y} * 2 + #{$input-border-width} * 2);
}

@mixin form-check {
  display: block;
  min-height: calc(#{map-get($font-sizes, base)} * #{map-get($line-heights, normal)});
  padding-left: 1.5em;
  margin-bottom: map-get($spacers, 2);

  .form-check-input {
    float: left;
    margin-left: -1.5em;
    margin-top: 0.25em;
    vertical-align: top;
    background-color: $white;
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    border: 1px solid $border-color;
    appearance: none;
    color-adjust: exact;
    width: 1em;
    height: 1em;
    cursor: pointer;
    transition: $transition-base;

    &:focus {
      border-color: $primary;
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba($primary, 0.25);
    }

    &:checked {
      background-color: $primary;
      border-color: $primary;
    }

    &:disabled {
      pointer-events: none;
      filter: none;
      opacity: 0.5;
      cursor: not-allowed;
    }
  }

  .form-check-label {
    cursor: pointer;
    font-weight: map-get($font-weights, normal);
    color: $text-primary;
  }
}

@mixin form-check-inline {
  @include form-check;
  
  display: inline-block;
  margin-right: map-get($spacers, 3);
}

/* ============================================
   Button Mixins
   ============================================ */

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: map-get($spacers, 2);
  padding: $btn-padding-y $btn-padding-x;
  font-family: $font-family-base;
  font-size: $btn-font-size;
  font-weight: $btn-font-weight;
  line-height: map-get($line-heights, normal);
  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  border: $btn-border-width solid transparent;
  border-radius: $btn-border-radius;
  transition: $transition-base;

  &:hover {
    text-decoration: none;
  }

  &:focus {
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba($primary, 0.25);
  }

  &:disabled,
  &.disabled {
    pointer-events: none;
    opacity: 0.65;
    cursor: not-allowed;
  }
}

@mixin button-variant($bg-color, $border-color: $bg-color, $color: $white, $hover-bg: null, $hover-border: null, $hover-color: null) {
  color: $color;
  background-color: $bg-color;
  border-color: $border-color;

  &:hover {
    color: $hover-color or $color;
    background-color: $hover-bg or darken($bg-color, 7.5%);
    border-color: $hover-border or darken($border-color, 10%);
  }

  &:focus {
    color: $hover-color or $color;
    background-color: $hover-bg or darken($bg-color, 7.5%);
    border-color: $hover-border or darken($border-color, 10%);
    box-shadow: 0 0 0 0.25rem rgba($bg-color, 0.5);
  }

  &:active,
  &.active {
    color: $hover-color or $color;
    background-color: $hover-bg or darken($bg-color, 10%);
    border-color: $hover-border or darken($border-color, 12.5%);
  }

  &:disabled,
  &.disabled {
    color: $color;
    background-color: $bg-color;
    border-color: $border-color;
  }
}

@mixin button-outline-variant($color, $color-hover: $white) {
  color: $color;
  border-color: $color;
  background-color: transparent;

  &:hover {
    color: $color-hover;
    background-color: $color;
    border-color: $color;
  }

  &:focus {
    box-shadow: 0 0 0 0.25rem rgba($color, 0.5);
  }

  &:disabled,
  &.disabled {
    color: $color;
    background-color: transparent;
  }
}

@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  border-radius: $border-radius;
}

/* ============================================
   Card Mixins
   ============================================ */

@mixin card-base {
  position: relative;
  display: flex;
  flex-direction: column;
  min-width: 0;
  word-wrap: break-word;
  background-color: $card-bg;
  background-clip: border-box;
  border: 1px solid $card-border-color;
  border-radius: $card-border-radius;
}

@mixin card-body {
  flex: 1 1 auto;
  padding: $card-padding;
}

@mixin card-header {
  padding: calc(#{$card-padding} * 0.75) $card-padding;
  margin-bottom: 0;
  background-color: $gray-100;
  border-bottom: 1px solid $card-border-color;
  border-top-left-radius: calc(#{$card-border-radius} - 1px);
  border-top-right-radius: calc(#{$card-border-radius} - 1px);
}

@mixin card-footer {
  padding: calc(#{$card-padding} * 0.75) $card-padding;
  background-color: $gray-100;
  border-top: 1px solid $card-border-color;
  border-bottom-right-radius: calc(#{$card-border-radius} - 1px);
  border-bottom-left-radius: calc(#{$card-border-radius} - 1px);
}

/* ============================================
   Animation Mixins
   ============================================ */

@mixin loading-spinner($size: 1.5rem, $border-width: 0.2em, $color: $primary) {
  display: inline-block;
  width: $size;
  height: $size;
  vertical-align: text-bottom;
  border: $border-width solid currentColor;
  border-right-color: transparent;
  border-radius: 50%;
  animation: spinner-border 0.75s linear infinite;
  color: $color;
}

@mixin fade-in($duration: map-get($transition-duration, 300)) {
  animation: fadeIn $duration map-get($transition-timing, out);
}

@mixin fade-out($duration: map-get($transition-duration, 300)) {
  animation: fadeOut $duration map-get($transition-timing, in);
}

@mixin slide-in-up($duration: map-get($transition-duration, 300)) {
  animation: slideInUp $duration map-get($transition-timing, out);
}

@mixin slide-out-down($duration: map-get($transition-duration, 300)) {
  animation: slideOutDown $duration map-get($transition-timing, in);
}

/* ============================================
   Utility Mixins
   ============================================ */

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin hover-lift($shadow: map-get($box-shadows, md)) {
  transition: $transition-base;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: $shadow;
  }
}

@mixin focus-ring($color: $primary, $width: 0.25rem) {
  &:focus {
    outline: 0;
    box-shadow: 0 0 0 $width rgba($color, 0.25);
  }
}

/* ============================================
   Responsive Mixins
   ============================================ */

@mixin media-breakpoint-up($name) {
  $min: map-get($breakpoints, $name);
  @if $min != 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name) {
  $max: map-get($breakpoints, $name) - 0.02;
  @media (max-width: $max) {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper) {
  $min: map-get($breakpoints, $lower);
  $max: map-get($breakpoints, $upper) - 0.02;

  @if $min != 0 {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else {
    @media (max-width: $max) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name) {
  @include media-breakpoint-between($name, $name);
}